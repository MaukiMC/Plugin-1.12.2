plugins {
    id 'java'
}

group 'de.mp'
version 'SNAPSHOT-v1.17.1_ALPHA'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        url 'https://jitpack.io'
    }
}

configurations {
    extraLibs
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: './src/main/resources')
    implementation 'com.destroystokyo.paper:paper-api:1.12.2-R0.1-SNAPSHOT'
    implementation 'de.taimos:totp:1.0'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'com.google.zxing:javase:3.5.1'
    implementation 'net.dv8tion:JDA:5.0.0-beta.2'
    implementation 'org.xerial:sqlite-jdbc:3.40.1.0'
    implementation 'com.github.Mokulu:discord-oauth2-api:1.0.2'

    extraLibs fileTree(include: ['*.jar'], dir: './src/main/resources')
    extraLibs 'de.taimos:totp:1.0'
    extraLibs 'commons-codec:commons-codec:1.15'
    extraLibs 'com.google.zxing:javase:3.5.1'
    extraLibs 'net.dv8tion:JDA:5.0.0-beta.2'
    extraLibs 'org.xerial:sqlite-jdbc:3.40.1.0'
    extraLibs 'com.github.Mokulu:discord-oauth2-api:1.0.2'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

task copypa01(type: Copy) {
    from jar
    into "D:\\MaukiSeason\\pa01\\plugins"
}

task copypa02(type: Copy) {
/*    from jar
    into "D:\\PaperMC-Net1\\pa02\\plugins"*/
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.extraLibs.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    destinationDir = file("$rootDir/out/jar")
    archiveFileName = 'Essentials.jar'
}